<?xml version='1.0'?>
<robot name="osmose" xmlns:xacro="http://www.ros.org/wiki/xacro">

<!-- To use parts described in other files, import them here-->
  <!-- <xacro:include filename="$(find osmose_description)/urdf/mybot.gazebo" />
  <xacro:include filename="$(find osmose_description)/urdf/sensors.xacro" /> -->


  <xacro:property name="mass" value="12"/>

  <xacro:property name="update_rate" value="50"/>

  <!--
    Visual mesh file for the vehicle, usually in DAE (Collada) format. Be sure to store the
    mesh with the origin of the mesh on the same position of the center of mass, otherwise
    the mesh pose will have to be corrected below in the <visual> block.
    Open the meshes for the uone vehicle in Blender to see an example on the mesh placement.
  -->
  <xacro:property name="visual_mesh_file" value="file://$(find osmose_description)/meshes/osmose.dae"/>

  <!-- Collision geometry mesh, usually in STL format (it is recommended to keep
  this geometry as simple as possible to improve the performance the physics engine
  regarding the computation of collision forces) -->
  <xacro:property name="collision_mesh_file" value="file://$(find osmose_description)/meshes/osmose.STL"/>

  <!-- The core of the robot -->
  <link name='base_link'>
    <inertial>
      <mass value="${mass}"/>
      <origin xyz="0.0 0 0" rpy=" 0 0 0"/>
      <inertia
          ixx="0.1" ixy="0" ixz="0"
          iyy="0.1" iyz="0"
          izz="0.1"   />
    </inertial>

    <collision name='collision'>
     <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
            <mesh filename="${collision_mesh_file}" scale="1 1 1" /> 
          </geometry>
    </collision>

    <visual name='visual'>
      <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
            <mesh filename="${visual_mesh_file}" scale="1 1 1" />
          </geometry>
    </visual>
    </link>


<!-- WHEEELLLLSSS-->


<link name="left_wheel">
    <!--origin xyz="0.1 0.13 0.1" rpy="0 1.5707 1.5707"/-->
    <collision name="collision">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <!-- <cylinder radius="0.1" length="0.05"/> -->
         <mesh filename="file://$(find osmose_description)/meshes/Wheels.stl" scale="1 1 1" /> 
      </geometry>
    </collision>
    <visual name="left_wheel_visual">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="file://$(find osmose_description)/meshes/Wheels.stl" scale="1 1 1" /> 
      </geometry>
    </visual>
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="5"/>
      <inertia
        ixx=".1" ixy="0.0" ixz="0.0"
        iyy=".1" iyz="0.0"
        izz=".1"/>
    </inertial>
  </link>

  <link name="right_wheel">
    <!--origin xyz="0.1 -0.13 0.1" rpy="0 1.5707 1.5707"/-->
    <collision name="collision">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="file://$(find osmose_description)/meshes/Wheels.stl" scale="1 1 1" /> 
      </geometry>
    </collision>
    <visual name="right_wheel_visual">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="file://$(find osmose_description)/meshes/Wheels.stl" scale="1 1 1" /> 
      </geometry>
    </visual>
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="5"/>
      <inertia
        ixx=".1" ixy="0.0" ixz="0.0"
        iyy=".1" iyz="0.0"
        izz=".1"/>
    </inertial>
  </link>


  <joint type="continuous" name="left_wheel_hinge">
    <origin xyz="0.053 0.1225 -0.13" rpy="0 0 0"/>
    <!--origin xyz="0.1 0.13 0" rpy="0 1.5707 1.5707"/-->
    <child link="left_wheel"/>
    <parent link="base_link"/>
    <axis xyz="0 1 0" rpy="0 0 0"/>
    <limit effort="10000" velocity="1000"/>
    <joint_properties damping="1.0" friction="1.0"/>
  </joint>

  <joint type="continuous" name="right_wheel_hinge">
    <origin xyz="0.053 -0.1225 -0.13" rpy="0 0 0"/>
    <!--origin xyz="0.1 -0.13 0" rpy="0 1.5707 1.5707"/-->
    <child link="right_wheel"/>
    <parent link="base_link"/>
    <axis xyz="0 1 0" rpy="0 0 0"/>
    <limit effort="10000" velocity="1000"/>
    <joint_properties damping="1.0" friction="1.0"/>
  </joint>



  <gazebo>
  <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
    <!-- Plugin update rate in Hz -->
    <updateRate>${update_rate}</updateRate>
    <!-- Name of left joint, defaults to `left_joint` -->
    <leftJoint>left_wheel</leftJoint>
    <!-- Name of right joint, defaults to `right_joint` -->
    <rightJoint>right_wheel</rightJoint>
    <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m -->
    <wheelSeparation>0.245</wheelSeparation>
    <!-- Diameter of the wheels, in meters, defaults to 0.15 m -->
    <wheelDiameter>0.064</wheelDiameter>
    <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 -->
    <wheelAcceleration>1.0</wheelAcceleration>
    <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
    <wheelTorque>20</wheelTorque>
    <!-- Topic to receive geometry_msgs/Twist message commands, defaults to `cmd_vel` -->
    <commandTopic>cmd_vel</commandTopic>
    <!-- Topic to publish nav_msgs/Odometry messages, defaults to `odom` -->
    <odometryTopic>odom</odometryTopic>
    <!-- Odometry frame, defaults to `odom` -->
    <odometryFrame>odom</odometryFrame>
    <!-- Robot frame to calculate odometry from, defaults to `base_footprint` -->
    <robotBaseFrame>base_link</robotBaseFrame>
    <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
    <odometrySource>1</odometrySource>
    <!-- Set to true to publish transforms for the wheel links, defaults to false -->
    <publishWheelTF>true</publishWheelTF>
    <!-- Set to true to publish transforms for the odometry, defaults to true -->
    <publishOdom>true</publishOdom>
    <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
    <publishWheelJointState>true</publishWheelJointState>
    <!-- Set to true to swap right and left wheels, defaults to true -->
    <legacyMode>false</legacyMode>
  </plugin>
</gazebo>







  </robot>
